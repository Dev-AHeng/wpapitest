package aheng.wpapitest.utils;

//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

public class EntityArrays {
    public static final Map<CharSequence, CharSequence> ISO8859_1_ESCAPE;
    public static final Map<CharSequence, CharSequence> ISO8859_1_UNESCAPE;
    public static final Map<CharSequence, CharSequence> HTML40_EXTENDED_ESCAPE;
    public static final Map<CharSequence, CharSequence> HTML40_EXTENDED_UNESCAPE;
    public static final Map<CharSequence, CharSequence> BASIC_ESCAPE;
    public static final Map<CharSequence, CharSequence> BASIC_UNESCAPE;
    public static final Map<CharSequence, CharSequence> APOS_ESCAPE;
    public static final Map<CharSequence, CharSequence> APOS_UNESCAPE;
    public static final Map<CharSequence, CharSequence> JAVA_CTRL_CHARS_ESCAPE;
    public static final Map<CharSequence, CharSequence> JAVA_CTRL_CHARS_UNESCAPE;

    public EntityArrays() {
    }

    public static Map<CharSequence, CharSequence> invert(Map<CharSequence, CharSequence> map) {
        Map<CharSequence, CharSequence> newMap = new HashMap();
        Iterator var2 = map.entrySet().iterator();

        while(var2.hasNext()) {
            Entry<CharSequence, CharSequence> pair = (Entry)var2.next();
            newMap.put(pair.getValue(), pair.getKey());
        }

        return newMap;
    }

    static {
        Map<CharSequence, CharSequence> initialMap = new HashMap();
        initialMap.put(" ", "&nbsp;");
        initialMap.put("¡", "&iexcl;");
        initialMap.put("¢", "&cent;");
        initialMap.put("£", "&pound;");
        initialMap.put("¤", "&curren;");
        initialMap.put("¥", "&yen;");
        initialMap.put("¦", "&brvbar;");
        initialMap.put("§", "&sect;");
        initialMap.put("¨", "&uml;");
        initialMap.put("©", "&copy;");
        initialMap.put("ª", "&ordf;");
        initialMap.put("«", "&laquo;");
        initialMap.put("¬", "&not;");
        initialMap.put("\u00ad", "&shy;");
        initialMap.put("®", "&reg;");
        initialMap.put("¯", "&macr;");
        initialMap.put("°", "&deg;");
        initialMap.put("±", "&plusmn;");
        initialMap.put("²", "&sup2;");
        initialMap.put("³", "&sup3;");
        initialMap.put("´", "&acute;");
        initialMap.put("µ", "&micro;");
        initialMap.put("¶", "&para;");
        initialMap.put("·", "&middot;");
        initialMap.put("¸", "&cedil;");
        initialMap.put("¹", "&sup1;");
        initialMap.put("º", "&ordm;");
        initialMap.put("»", "&raquo;");
        initialMap.put("¼", "&frac14;");
        initialMap.put("½", "&frac12;");
        initialMap.put("¾", "&frac34;");
        initialMap.put("¿", "&iquest;");
        initialMap.put("À", "&Agrave;");
        initialMap.put("Á", "&Aacute;");
        initialMap.put("Â", "&Acirc;");
        initialMap.put("Ã", "&Atilde;");
        initialMap.put("Ä", "&Auml;");
        initialMap.put("Å", "&Aring;");
        initialMap.put("Æ", "&AElig;");
        initialMap.put("Ç", "&Ccedil;");
        initialMap.put("È", "&Egrave;");
        initialMap.put("É", "&Eacute;");
        initialMap.put("Ê", "&Ecirc;");
        initialMap.put("Ë", "&Euml;");
        initialMap.put("Ì", "&Igrave;");
        initialMap.put("Í", "&Iacute;");
        initialMap.put("Î", "&Icirc;");
        initialMap.put("Ï", "&Iuml;");
        initialMap.put("Ð", "&ETH;");
        initialMap.put("Ñ", "&Ntilde;");
        initialMap.put("Ò", "&Ograve;");
        initialMap.put("Ó", "&Oacute;");
        initialMap.put("Ô", "&Ocirc;");
        initialMap.put("Õ", "&Otilde;");
        initialMap.put("Ö", "&Ouml;");
        initialMap.put("×", "&times;");
        initialMap.put("Ø", "&Oslash;");
        initialMap.put("Ù", "&Ugrave;");
        initialMap.put("Ú", "&Uacute;");
        initialMap.put("Û", "&Ucirc;");
        initialMap.put("Ü", "&Uuml;");
        initialMap.put("Ý", "&Yacute;");
        initialMap.put("Þ", "&THORN;");
        initialMap.put("ß", "&szlig;");
        initialMap.put("à", "&agrave;");
        initialMap.put("á", "&aacute;");
        initialMap.put("â", "&acirc;");
        initialMap.put("ã", "&atilde;");
        initialMap.put("ä", "&auml;");
        initialMap.put("å", "&aring;");
        initialMap.put("æ", "&aelig;");
        initialMap.put("ç", "&ccedil;");
        initialMap.put("è", "&egrave;");
        initialMap.put("é", "&eacute;");
        initialMap.put("ê", "&ecirc;");
        initialMap.put("ë", "&euml;");
        initialMap.put("ì", "&igrave;");
        initialMap.put("í", "&iacute;");
        initialMap.put("î", "&icirc;");
        initialMap.put("ï", "&iuml;");
        initialMap.put("ð", "&eth;");
        initialMap.put("ñ", "&ntilde;");
        initialMap.put("ò", "&ograve;");
        initialMap.put("ó", "&oacute;");
        initialMap.put("ô", "&ocirc;");
        initialMap.put("õ", "&otilde;");
        initialMap.put("ö", "&ouml;");
        initialMap.put("÷", "&divide;");
        initialMap.put("ø", "&oslash;");
        initialMap.put("ù", "&ugrave;");
        initialMap.put("ú", "&uacute;");
        initialMap.put("û", "&ucirc;");
        initialMap.put("ü", "&uuml;");
        initialMap.put("ý", "&yacute;");
        initialMap.put("þ", "&thorn;");
        initialMap.put("ÿ", "&yuml;");
        ISO8859_1_ESCAPE = Collections.unmodifiableMap(initialMap);
        ISO8859_1_UNESCAPE = Collections.unmodifiableMap(invert(ISO8859_1_ESCAPE));
        initialMap = new HashMap();
        initialMap.put("ƒ", "&fnof;");
        initialMap.put("Α", "&Alpha;");
        initialMap.put("Β", "&Beta;");
        initialMap.put("Γ", "&Gamma;");
        initialMap.put("Δ", "&Delta;");
        initialMap.put("Ε", "&Epsilon;");
        initialMap.put("Ζ", "&Zeta;");
        initialMap.put("Η", "&Eta;");
        initialMap.put("Θ", "&Theta;");
        initialMap.put("Ι", "&Iota;");
        initialMap.put("Κ", "&Kappa;");
        initialMap.put("Λ", "&Lambda;");
        initialMap.put("Μ", "&Mu;");
        initialMap.put("Ν", "&Nu;");
        initialMap.put("Ξ", "&Xi;");
        initialMap.put("Ο", "&Omicron;");
        initialMap.put("Π", "&Pi;");
        initialMap.put("Ρ", "&Rho;");
        initialMap.put("Σ", "&Sigma;");
        initialMap.put("Τ", "&Tau;");
        initialMap.put("Υ", "&Upsilon;");
        initialMap.put("Φ", "&Phi;");
        initialMap.put("Χ", "&Chi;");
        initialMap.put("Ψ", "&Psi;");
        initialMap.put("Ω", "&Omega;");
        initialMap.put("α", "&alpha;");
        initialMap.put("β", "&beta;");
        initialMap.put("γ", "&gamma;");
        initialMap.put("δ", "&delta;");
        initialMap.put("ε", "&epsilon;");
        initialMap.put("ζ", "&zeta;");
        initialMap.put("η", "&eta;");
        initialMap.put("θ", "&theta;");
        initialMap.put("ι", "&iota;");
        initialMap.put("κ", "&kappa;");
        initialMap.put("λ", "&lambda;");
        initialMap.put("μ", "&mu;");
        initialMap.put("ν", "&nu;");
        initialMap.put("ξ", "&xi;");
        initialMap.put("ο", "&omicron;");
        initialMap.put("π", "&pi;");
        initialMap.put("ρ", "&rho;");
        initialMap.put("ς", "&sigmaf;");
        initialMap.put("σ", "&sigma;");
        initialMap.put("τ", "&tau;");
        initialMap.put("υ", "&upsilon;");
        initialMap.put("φ", "&phi;");
        initialMap.put("χ", "&chi;");
        initialMap.put("ψ", "&psi;");
        initialMap.put("ω", "&omega;");
        initialMap.put("ϑ", "&thetasym;");
        initialMap.put("ϒ", "&upsih;");
        initialMap.put("ϖ", "&piv;");
        initialMap.put("•", "&bull;");
        initialMap.put("…", "&hellip;");
        initialMap.put("′", "&prime;");
        initialMap.put("″", "&Prime;");
        initialMap.put("‾", "&oline;");
        initialMap.put("⁄", "&frasl;");
        initialMap.put("℘", "&weierp;");
        initialMap.put("ℑ", "&image;");
        initialMap.put("ℜ", "&real;");
        initialMap.put("™", "&trade;");
        initialMap.put("ℵ", "&alefsym;");
        initialMap.put("←", "&larr;");
        initialMap.put("↑", "&uarr;");
        initialMap.put("→", "&rarr;");
        initialMap.put("↓", "&darr;");
        initialMap.put("↔", "&harr;");
        initialMap.put("↵", "&crarr;");
        initialMap.put("⇐", "&lArr;");
        initialMap.put("⇑", "&uArr;");
        initialMap.put("⇒", "&rArr;");
        initialMap.put("⇓", "&dArr;");
        initialMap.put("⇔", "&hArr;");
        initialMap.put("∀", "&forall;");
        initialMap.put("∂", "&part;");
        initialMap.put("∃", "&exist;");
        initialMap.put("∅", "&empty;");
        initialMap.put("∇", "&nabla;");
        initialMap.put("∈", "&isin;");
        initialMap.put("∉", "&notin;");
        initialMap.put("∋", "&ni;");
        initialMap.put("∏", "&prod;");
        initialMap.put("∑", "&sum;");
        initialMap.put("−", "&minus;");
        initialMap.put("∗", "&lowast;");
        initialMap.put("√", "&radic;");
        initialMap.put("∝", "&prop;");
        initialMap.put("∞", "&infin;");
        initialMap.put("∠", "&ang;");
        initialMap.put("∧", "&and;");
        initialMap.put("∨", "&or;");
        initialMap.put("∩", "&cap;");
        initialMap.put("∪", "&cup;");
        initialMap.put("∫", "&int;");
        initialMap.put("∴", "&there4;");
        initialMap.put("∼", "&sim;");
        initialMap.put("≅", "&cong;");
        initialMap.put("≈", "&asymp;");
        initialMap.put("≠", "&ne;");
        initialMap.put("≡", "&equiv;");
        initialMap.put("≤", "&le;");
        initialMap.put("≥", "&ge;");
        initialMap.put("⊂", "&sub;");
        initialMap.put("⊃", "&sup;");
        initialMap.put("⊄", "&nsub;");
        initialMap.put("⊆", "&sube;");
        initialMap.put("⊇", "&supe;");
        initialMap.put("⊕", "&oplus;");
        initialMap.put("⊗", "&otimes;");
        initialMap.put("⊥", "&perp;");
        initialMap.put("⋅", "&sdot;");
        initialMap.put("⌈", "&lceil;");
        initialMap.put("⌉", "&rceil;");
        initialMap.put("⌊", "&lfloor;");
        initialMap.put("⌋", "&rfloor;");
        initialMap.put("〈", "&lang;");
        initialMap.put("〉", "&rang;");
        initialMap.put("◊", "&loz;");
        initialMap.put("♠", "&spades;");
        initialMap.put("♣", "&clubs;");
        initialMap.put("♥", "&hearts;");
        initialMap.put("♦", "&diams;");
        initialMap.put("Œ", "&OElig;");
        initialMap.put("œ", "&oelig;");
        initialMap.put("Š", "&Scaron;");
        initialMap.put("š", "&scaron;");
        initialMap.put("Ÿ", "&Yuml;");
        initialMap.put("ˆ", "&circ;");
        initialMap.put("˜", "&tilde;");
        initialMap.put(" ", "&ensp;");
        initialMap.put(" ", "&emsp;");
        initialMap.put(" ", "&thinsp;");
        initialMap.put("\u200c", "&zwnj;");
        initialMap.put("\u200d", "&zwj;");
        initialMap.put("\u200e", "&lrm;");
        initialMap.put("\u200f", "&rlm;");
        initialMap.put("–", "&ndash;");
        initialMap.put("—", "&mdash;");
        initialMap.put("‘", "&lsquo;");
        initialMap.put("’", "&rsquo;");
        initialMap.put("‚", "&sbquo;");
        initialMap.put("“", "&ldquo;");
        initialMap.put("”", "&rdquo;");
        initialMap.put("„", "&bdquo;");
        initialMap.put("†", "&dagger;");
        initialMap.put("‡", "&Dagger;");
        initialMap.put("‰", "&permil;");
        initialMap.put("‹", "&lsaquo;");
        initialMap.put("›", "&rsaquo;");
        initialMap.put("€", "&euro;");
        HTML40_EXTENDED_ESCAPE = Collections.unmodifiableMap(initialMap);
        HTML40_EXTENDED_UNESCAPE = Collections.unmodifiableMap(invert(HTML40_EXTENDED_ESCAPE));
        initialMap = new HashMap();
        initialMap.put("\"", "&quot;");
        initialMap.put("&", "&amp;");
        initialMap.put("<", "&lt;");
        initialMap.put(">", "&gt;");
        BASIC_ESCAPE = Collections.unmodifiableMap(initialMap);
        BASIC_UNESCAPE = Collections.unmodifiableMap(invert(BASIC_ESCAPE));
        initialMap = new HashMap();
        initialMap.put("'", "&apos;");
        APOS_ESCAPE = Collections.unmodifiableMap(initialMap);
        APOS_UNESCAPE = Collections.unmodifiableMap(invert(APOS_ESCAPE));
        initialMap = new HashMap();
        initialMap.put("\b", "\\b");
        initialMap.put("\n", "\\n");
        initialMap.put("\t", "\\t");
        initialMap.put("\f", "\\f");
        initialMap.put("\r", "\\r");
        JAVA_CTRL_CHARS_ESCAPE = Collections.unmodifiableMap(initialMap);
        JAVA_CTRL_CHARS_UNESCAPE = Collections.unmodifiableMap(invert(JAVA_CTRL_CHARS_ESCAPE));
    }
}
